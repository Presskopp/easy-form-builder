
/* 
 Created by : Hassan Tafreshi
 Copy right owner : whiteStudio.team
 Desc: This multi-select is designed base on boostrap 5 and used for Easy form builder Wordpress Plugin
 */


 let lastEventClickIdEfb="";
 let nothingSelectMessageEfb = efb_var.text.nothingSelected;
 let listMSelectEfb =[];

 // test value 
 options =['Hassan','Farshid','Amin','Ehssan']
function create_multiselect(id){
    console.log(options);
    //const options =['Hassan','Ehssan','Mine'];
    let ob =`<!--List-->`
    for(op in options){
        ob += `<div data-id="${id}" class="form-check efbSelect" ><input class="efb efbSelect" type="checkbox" data-id="${id}" value="" id="${id}-${op}">
             <label class="efb multiSelect efbSelect" data-id="${id}"  for="${id}-${op}" id="${id}-${op}-value">${options[op]}</label></div>`
    }
    const el=document.getElementById(id);
  /*   const newNode= document.createElement("div");
    newNode.className+="efb d-none efbSelect mselect-list border border-2";
    newNode.id=id+'-list';
    newNode.innerHTML=ob;
    el.className += 'efb efbSelect mselect MultiSelect border border-1 row';
    el.dataset.id = id;
    el.dataset.value = "";
    if(el.innerHTML.length<5){
        console.log('!!!!!!!!!!!!!!!!!!!!!',nothingSelectMessageEfb)
        el.innerHTML=nothingSelectMessageEfb;}
    el.parentNode.insertBefore(newNode, el.nextSibling); */
    console.log(el)
    el.addEventListener('click',()=>{
        const listId= el.id +'_list';
        console.log(listId ,document.getElementById(listId), document.getElementById(listId).classList.contains('d-none'));
        document.getElementById(listId).classList.contains('d-none') ?  document.getElementById(listId).classList.remove('d-none') : document.getElementById(listId).classList.add('d-none')
         
    })

}

document.addEventListener("click", (evnt) => {
    console.log(evnt.target ,lastEventClickIdEfb);
    if(lastEventClickIdEfb.length>1 && !evnt.target.classList.contains('efbSelect')){
        document.getElementById(lastEventClickIdEfb).classList.add('d-none');
    }else if(evnt.target.classList.contains('efbSelect')){
        if(lastEventClickIdEfb.length>5 && lastEventClickIdEfb!=evnt.target.dataset.id+"_list"){
            document.getElementById(lastEventClickIdEfb).classList.add('d-none');
        }
        lastEventClickIdEfb=evnt.target.dataset.id+"_list";
        console.log(evnt.target.tagName,lastEventClickIdEfb);
        if(evnt.target.type=="checkbox"){
            if(evnt.target.checked==true){
                    const id = evnt.target.id + '-value';
                    const value = document.getElementById(id).innerHTML;
                   
                    if(document.getElementById(evnt.target.dataset.id).dataset.value.length<1){
                        document.getElementById(evnt.target.dataset.id).innerHTML=`<span class="efb btn-darkb text-white  py-1 px-2 mselect  efbSelect selected" data-id="${evnt.target.dataset.id}" data-op="${evnt.target.id}">${value}</span>`
                        document.getElementById(evnt.target.dataset.id).dataset.value =  value ;
                        //listMSelectEfb.push({id:evnt.target.dataset.id,select:[{id:evnt.target.id,value:value}]})
                        listMSelectEfb.push({ id_: evnt.target.id, dataId: evnt.target.id , parent:evnt.target.dataset.id, type: `option`, value: value, id_op: op, step: "step_el_efb", amount: "amount_el_efb" })
                        //console.log(listMSelectEfb);
                    }else{
                        document.getElementById(evnt.target.dataset.id).dataset.value +=   " , "+value ;
                        document.getElementById(evnt.target.dataset.id).innerHTML+=`<span class="efb btn-darkb text-white py-1 px-2 mselect  efbSelect selected" data-id="${evnt.target.dataset.id}" data-op="${evnt.target.id}">${value}</span>`
                        
                        listMSelectEfb.push({ id_: evnt.target.id, dataId: evnt.target.id , parent:evnt.target.dataset.id, type: `option`, value: value, id_op: op, step: "step_el_efb", amount: "amount_el_efb" })
                        console.log(listMSelectEfb);
                    }
            }else{
                removeSelectedOptionEfb(evnt.target)
            }
        }else if(evnt.target.tagName=="SPAN"){
            removeSelectedOptionEfb(evnt.target)
        }
        document.getElementById(lastEventClickIdEfb).classList.remove('d-none');
    }
    
});

const removeSelectedOptionEfb=(el)=>{
    console.log(el);
    let e = document.getElementById(el.dataset.id);
    if(el.tagName=="SPAN"){
        const id = el.dataset.id;
        const op = el.dataset.op;
        let v =  e.dataset.value
        document.getElementById(op).checked=false;
        console.log(id,op)
        el.remove();       
        removeObMselectEfb(id ,op)
    }else{
        const op =el.id
        const ed = document.querySelector(`[data-op="${op}"]`)
        const id = ed.dataset.id;
        ed.remove();
        removeObMselectEfb(id ,op)
    }
    
    if(e.innerHTML.length<2) e.innerHTML= nothingSelectMessageEfb;
}

const removeObMselectEfb=(id , op)=>{
    let value ='';
    let ob = listMSelectEfb.findIndex( x=> x.parent ==id &&  x.id_==op );
    console.log(ob ,listMSelectEfb , id , op);
    listMSelectEfb.splice(ob,1);
   for(const o of listMSelectEfb){
      if(listMSelectEfb.id_ == id) value += o.value + ', '
   }
   document.getElementById(id).dataset.value = value;
}

const removeAllMselectEfb=(id)=>{
    
}

const selectAllMselectEfb=(id)=>{

}